//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace session11_entityFramework_crud
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class mySchooldbEntities : DbContext
    {
        public mySchooldbEntities()
            : base("name=mySchooldbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Cours> Courses { get; set; }
        public virtual DbSet<Grade> Grades { get; set; }
        public virtual DbSet<StudentAddress> StudentAddresses { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<TeacherInfo> TeacherInfoes { get; set; }
    
        public virtual int Teacher_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Teacher_Delete", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Teacher_Insert(string teacherName, Nullable<int> modeOfTeaching)
        {
            var teacherNameParameter = teacherName != null ?
                new ObjectParameter("TeacherName", teacherName) :
                new ObjectParameter("TeacherName", typeof(string));
    
            var modeOfTeachingParameter = modeOfTeaching.HasValue ?
                new ObjectParameter("ModeOfTeaching", modeOfTeaching) :
                new ObjectParameter("ModeOfTeaching", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Teacher_Insert", teacherNameParameter, modeOfTeachingParameter);
        }
    
        public virtual int Teacher_Update(Nullable<int> id, string teacherName, Nullable<int> modeOfTeaching)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var teacherNameParameter = teacherName != null ?
                new ObjectParameter("TeacherName", teacherName) :
                new ObjectParameter("TeacherName", typeof(string));
    
            var modeOfTeachingParameter = modeOfTeaching.HasValue ?
                new ObjectParameter("ModeOfTeaching", modeOfTeaching) :
                new ObjectParameter("ModeOfTeaching", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Teacher_Update", idParameter, teacherNameParameter, modeOfTeachingParameter);
        }
    }
}
